---
title: Installing and Configuring Service Instance Manager
owner: Fleet Management
---

<strong><%= modified_date %></strong>

This topic provides instructions for operators for how to install and configure <%= vars.product_full %>.


## <a id='overview'></a> Overview

<%= vars.product_short %> consists of two apps.
These are deployed on a single host foundation.

The apps are:

* <code>service-instance-manager-api</code>, which communicates with the Cloud Controller of all target foundations.
* <code>service-instance-manager</code>, which hosts the web UI.

<br>
To install and configure <%= vars.product_short %>:

1. [Download <%= vars.product_short %>](#download)
1. [Configure the API App](#api-app)
1. [Deploy the Apps](#deploying)
1. [Create a UAA client](#create-client)


## <a id='networking'></a> About Networking for <%= vars.product_short %>

Before you begin installation, here are a few things to know about the networking and routing for the <%= vars.product_short %>:

* The `service-instance-manager-api` app must be able to reach the Cloud Controller API (CAPI) for
each target foundation. Depending on the network setup, extra steps might be required to allow
traffic from the app to the target foundation.

* The `service-instance-manager` web app only requires a connection to the `service-instance-manager-api`.
The web app does not connect directly to the target foundations.

* Because of browser cross-origin access, the `service-instance-manager-api` API app and the
`service-instance-manager-api` web app must be pushed with the same route. The web app expects the
API app to be available at `/api`.


## <a id='requirements'></a> Prerequisites

Before you install and configure <%= vars.product_short %>, you must have:

1. The cf Command Line Interface (CLI). For how to install it, see
<a href="https://docs.pivotal.io/pivotalcf/cf-cli/install-go-cli.html">Installing the cf CLI</a>.

1. The User Account and Authentication Command Line Interface (UAAC).
For how to install it, see <a href="https://github.com/cloudfoundry/cf-uaac">cf-uaac</a> on GitHub.


## <a id='download'></a> Download <%= vars.product_short %>

Download the latest version of <%= vars.product_short %> from
<a href="https://network.pivotal.io/products/service-instance-manager/"><%= vars.product_network %></a>.

## <a id='api-app'></a> Configure the API App

To configure the API app:

1. Unzip the <%= vars.product_short %> tarball you downloaded.

1. Open the <code>config.json</code> file that you just extracted from the tarball in a text editor.

1. Edit <code>config.json</code> to include a section for each target foundation.
The example below shows the configuration for two foundations.

    ```
    [
      {
        "name":"TARGET-FOUNDATION",
        "cfApi":"API-URL"
      },
      {
        "name":"TARGET-FOUNDATION",
        "cfApi":"API-URL",
        "client_id":"CUSTOM-UAA-CLIENT-ID",
        "identityProviderName":"SAML-PROVIDER"
      }
      ...
    ]
    ```

    Where:
    <ul>
      <li><code>TARGET-FOUNDATION</code> is a human-readable name for the target foundation.</li>
      <li><code>API-URL</code> is the URL of the API endpoint for the target foundation.</li>
      <li><code>CUSTOM-UAA-CLIENT-ID</code> (Optional) is a custom <code>client_id</code>
        that you can set when following the steps in
        <a href="#create-client">Create a UAA Client</a> below.
        If you do not set a custom ID, it defaults to <code>fleet-manager</code>.
      </li>
      <li><code>SAML-PROVIDER</code> (Optional) is the name of the identity provider that you can configure
        for UAA. If an identity provider is configured, the user need only log in once to use <%= vars.product_short %>.
        If you do not know the name of your identity provider, follow steps 1â€“4 of
        <a href="https://docs.pivotal.io/pivotalcf/opsguide/auth-sso.html#configure-pcf-for-saml">Configure <%= vars.app_runtime_abbr %> as a Service Provider for SAML</a>.</li>
    </ul>

## <a id='deploying'></a> Deploy the Apps

To install <%= vars.product_short %>, deploy the apps that you downloaded:

1. Log in to the cf CLI for the foundation on which
you want to host <%= vars.product_short %> by running:

    ```
    cf api https://api.HOST-CLOUD-FOUNDRY-DOMAIN
    cf auth
    ```

    For example:

    <pre class="terminal">
    $ cf api https<span>:</span>//api.my-cloud-foundry.example.com
    $ cf auth
    </pre>

1. Target the org and space to deploy <%= vars.product_short %> in by running:

    ```
    cf target -o HOST-ORG -s HOST-SPACE
    ```

1. Execute the installation script `install.sh` to push the API and web apps by running:

    ```
    ./install.sh
    ```
   This passes the `config.json` to the API app.


## <a id='create-client'></a> Create UAA Clients

Before logging in to <%= vars.product_short %>, you must create a client in the UAA of each target
foundation.
This client is used to authenticate on behalf of the user when a user logs in to <%= vars.product_short %>.

This means that <%= vars.product_short %> only has the permissions available to that user on each target
foundation.

To create the clients in each target foundation, perform the following steps for each foundation:

1. Retrieve the UAA admin credentials for the foundation from the <%= vars.app_runtime_full %> tile in
<%= vars.ops_manager %>. These are found at **Credentials** &gt; **UAA** &gt; **Admin Client Credentials**.

1. Target and authenticate with UAA for the foundation by running:

    ```
    uaac target uaa.YOUR-DOMAIN
    uaac token client get
    ```

    For example:

    <pre class="terminal">
    $ uaac target uaa.target-cf-system-domain.example.com
    $ uaac token client get
    </pre>
    This command prompts for the admin credentials of UAA that you retrieved
    in the previous step.

1. Retrieve the route where the <%= vars.product_short %> app is deployed on the host foundation by running:

    ```
    cf app service-instance-manager
    export SIM_ROUTE="$(cf app service-instance-manager | grep routes | awk '{ print $2 }')"
    ```
    <p class="note">
      <strong>Note:</strong> The variable <code>SIM_ROUTE</code> is the route where the
      <%= vars.product_short %> app is deployed on the host
      foundation. It is the same for every client in each target foundation.<br>
      <code>redirect_uri</code> is used by UAA to confirm that the request for
      authentication is coming from a known location.
    </p>

1.  Add the client to UAA by running:

    ```
    uaac client add "fleet-manager"  \
        --name "Fleet Manager client for Service Instance Manager" \
        --scope "cloud_controller.read,cloud_controller.write,cloud_controller.admin_read_only,cloud_controller.admin,cloud_controller.global_auditor" \
        --authorized_grant_types "implicit" \
        --redirect_uri "http://${SIM_ROUTE}/**,https://${SIM_ROUTE}/**" \
        --autoapprove "true" \
        --secret ""
    ```

<%= vars.product_short %> is now accessible at the route it was pushed to.

## <a id='enable-cache'></a> (Optional) Enable the <%= vars.product_short %> Cache

You must enable the <%= vars.product_short %> cache for foundations of more than 2000 service instances
or service bindings.

To enable the <%= vars.product_short %> cache:

1. Set the `SIM_CACHE_ENABLED` environment variable in the <%= vars.product_short %> API app on the
host foundation by running:

     ```
     cf set-env service-instance-manager-api SIM_CACHE_ENABLED true
     ```

## <a id='ts'></a> Troubleshooting

This section provides a solution for the following errors:

- [Buildpack Unavailable](#buildpack-unavailable)
- [The Cloud Controller is Slow to Respond to Requests](#cc-unresponsive)

<a name="buildpack-unavailable"></a>
<table class="nice">
  <style>
    main table {
      table-layout: fixed;
    }
  </style>
  <col width="20%">
  <col width="80%">
  <tr>
  <th colspan="2" style="text-align: left;">
    <br>
    Buildpack Unavailable
    <br><br>
  </th>
  </tr>
  <tr>
    <th>Symptom</th>
    <td>
      <p>During deployment of #{vars.product_short}, the <code>cf push</code>
      command outputs the following error:</p>
      <pre class='terminal'>$ Failed to clone git repository at https://github.com/cloudfoundry/nodejs-buildpack.git</pre>
    </td>
  </tr>
  <tr>
    <th>Cause</th>
    <td><p>The host foundation cannot retrieve the NodeJS buildpack from GitHub.</p></td>
  </tr>
  <tr>
    <th style="vertical-align: top; padding-top: 1em;">Solution</th>
    <td>
      <p>To solve this issue, do the following:</p>
      <ol>
        <li>
          <p>Look up the buildpack version listed in the <code>service-instance-manager/api/manifest.yml</code>.</p>
        </li>
        <li>
          <p>Download the corresponding buildpack version from <a href='https://network.pivotal.io/products/nodejs-buildpack'>VMware Tanzu Network</a> or GitHub.</p>
        </li>
        <li>
          <p>Install the buildpack by running:</p>
          <pre class="terminal">cf create-buildpack BUILDPACK-PATH</pre>
        </li>
      </ol>
    </td>
  </tr>
</table>

<a name="cc-unresponsive"></a>
<table class="nice">
  <style>
    main table {
      table-layout: fixed;
    }
  </style>
  <col width="20%">
  <col width="80%">
  <tr>
  <th colspan="2" style="text-align: left;">
    <br>
    The Cloud Controller is Slow to Respond to Requests
    <br><br>
  </th>
  </tr>
  <tr>
    <th>Symptom</th>
    <td><p>The Cloud Controller is slow to respond to requests, or does not respond at all.</p></td>
  </tr>
  <tr>
    <th>Cause</th>
    <td>
      <p>
        When targeting a foundation with tens of thousands of service instances,
        <%= vars.product_short %> can deny service to the Cloud Controller.
      </p>
    </td>
  </tr>
  <tr>
    <th style="vertical-align: top; padding-top: 1em;">Solution</th>
    <td>
      <p>To solve this issue, do the following:</p>
      <ol>
        <li>
          <p>Stop both <%= vars.product_short %> apps:</p>
          <ol>
            <li>
              <p>Log in to the cf CLI for the foundation on which you hosted <%= vars.product_short %> by running:</p>
              <pre class="terminal">cf api https<span>:</span>//api.HOST-CLOUD-FOUNDRY-DOMAIN <br>cf auth</pre>
              <p>For example:</p>
              <pre class="terminal">$ cf api https<span>:</span>//api.my-cloud-foundry.example.com api.my-cloud-foundry.example.com <br>$ cf auth</pre>
            </li>
            <li>
              <p>Target the org and space that you deployed <%= vars.product_short %> in by running:</p>
              <pre class="terminal">cf target -o HOST-ORG -s HOST-SPACE</pre>
            </li>
            <li>
              <p>Stop the apps by running:</p>
              <pre class="terminal">cf stop service-instance-manager <br>cf stop service-instance-manager-api</pre>
            </li>
          </ol>
        </li>
        <li>
          <p>
            Remove the section for the foundation that has an unresponsive Cloud Controller
            from the <code>config.json</code> that you edited as part of <a href='#api-app'>Configure the API App</a>.
          </p>
        </li>
        <li>
          <p>Run the install script to re-push the apps:</p>
          <pre class="terminal">./install.sh</pre>
        </li>
      </ol>
    </td>
  </tr>
</table>
